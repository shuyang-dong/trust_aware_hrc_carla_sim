{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1pe_FdHrlhaSCLMwK2sgMHyKBIgoQV0in","timestamp":1689175229361}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"7CQKhzoI4xrp","colab":{"base_uri":"https://localhost:8080/","height":253},"executionInfo":{"status":"error","timestamp":1689948055503,"user_tz":-60,"elapsed":1798,"user":{"displayName":"pian Yu","userId":"05304852284401633008"}},"outputId":"a23cd22f-8b42-4462-fa66-e878b8b5300c"},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import math\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n","import scipy.stats as stats\n","# import pystan\n","import seaborn as sns\n","from pprint import pprint\n","import _pickle as pkl\n","from scipy.stats.mstats import normaltest, kruskalwallis\n","from math import *\n","from scipy.stats import bernoulli\n","from numpy.random import normal\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import KFold\n","from scipy.stats import gaussian_kde, sem\n","from scipy.stats import norm\n","import scipy.stats as stats\n","from random import random\n","from random import seed\n","import pickle\n","\n","## Getting back the objects:\n","path='/content/drive/MyDrive/0 Research files/Trust Project Submitted to ITSC/transition probability/'\n","\n","with open(path+'trustMM.pkl','rb') as f:  # Python 3: open(..., 'rb')\n","    trustMM = pickle.load(f)\n","\n","with open(path+'actMM_TB.pkl','rb') as f:  # Python 3: open(..., 'rb')\n","   actMM_TB = pickle.load(f)\n","\n","# print(actMM_TB) #trust-based takeover probability\n","# print(trustMM) # (0, obstacle), meaning not takeover for obstacle"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-4e51bf581463>\u001b[0m in \u001b[0;36m<cell line: 28>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'/content/drive/MyDrive/0 Research files/Trust Project Submitted to ITSC/transition probability/'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'trustMM.pkl'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Python 3: open(..., 'rb')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m     \u001b[0mtrustMM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/0 Research files/Trust Project Submitted to ITSC/transition probability/trustMM.pkl'"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","WS_d = 1\n","\n","#robot states and labels\n","WS_node_dict = {\n","    # base stations\n","    1: {frozenset(): 1},\n","    2: {frozenset(): 1},\n","    3: {frozenset(): 1},\n","    4: {frozenset([]): 1},\n","    5: {frozenset(['target1', ]): 1},\n","    6: {frozenset(): 1},\n","    7: {frozenset(['target2', ]): 1},\n","    8: {frozenset(): 1},\n","    9: {frozenset(): 1},\n","    10: {frozenset(): 1},\n","    11: {frozenset(['target3', ]): 1},\n","    12: {frozenset(): 1},\n","}\n","\n","# robot action\n","U_r = [tuple('a1'), tuple('a2'), tuple('a3')]\n","# human action\n","U_h = [tuple('takeover'), tuple('standstill')]\n","\n","#incidents\n","incidents={'construction', 'pedestrian', 'truck', 'empty'}\n","\n","#----------------------\n","#incident associated with each edge (road segment)\n","#Action 1\n","WS_position_edge_dict1={\n","    # incidents\n","    (1, 2): 'construction',\n","    (3, 5): 'empty',\n","    (4, 6): 'construction',\n","    (6, 8): 'pedestrian',\n","    (7, 9): 'pedestrian',\n","    (11, 12): 'empty',\n","    (12, 12): 'empty',\n","}\n","\n","#Action 2\n","WS_position_edge_dict2={\n","    # incidents\n","    (1, 3): 'pedestrian',\n","    (2, 5): 'pedestrian',\n","    (4, 7): 'empty',\n","    (5, 8): 'construction',\n","    (7, 10): 'construction',\n","    (8, 11): 'truck',\n","    (9, 11): 'construction',\n","    (10, 11): 'pedestrian',\n","    (11, 12): 'empty',\n","    (12, 12): 'empty',\n","}\n","\n","#Action 3\n","WS_position_edge_dict3={\n","    # incidents\n","    (1, 4): 'truck',\n","    (2, 6): 'empty',\n","    (3, 7): 'truck',\n","    (5, 9): 'truck',\n","    (6, 10): 'truck',\n","    (11, 12): 'empty',\n","    (12, 12): 'empty',\n","}"],"metadata":{"id":"nsCiYoSETnWZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#------------------------\n","#trust levels\n","trustlevel=[0, 1, 2, 3, 4, 5, 6]\n","trust_number = len(trustlevel)\n","\n","# Define trust transition matrix for different incidents: standstill\n","A1 = trustMM[(0,'Obstacle')]\n","A2 = trustMM[(0, 'Pedestrian')]\n","A3 = trustMM[(0, 'Truck')]\n","A4 = [[0] * trust_number for _ in range(trust_number)]\n","for i in range(trust_number):\n","    A4[i][i] = 1\n","\n","B1 = trustMM[(1,'Obstacle')]\n","B2 = trustMM[(1, 'Pedestrian')]\n","B3 = trustMM[(1, 'Truck')]\n","B4 = A4.copy()\n","\n","\n","\n","WS_trust_transition_matrix_standstill_dict={\n","    'construction': A1,\n","    'pedestrian': A2,\n","    'truck': A3,\n","    'empty': A4,\n","}\n","\n","\n","# Define trust transition matrix for different incidents: takeover\n","\n","WS_trust_transition_matrix_takeover_dict={\n","    'construction': B1,\n","    'pedestrian': B2,\n","    'truck': B3,\n","    'empty': B4,\n","}\n","\n","print(WS_trust_transition_matrix_standstill_dict)\n","print(WS_trust_transition_matrix_takeover_dict)"],"metadata":{"id":"0scWJRUJtmw4","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"error","timestamp":1689947915019,"user_tz":-60,"elapsed":285,"user":{"displayName":"pian Yu","userId":"05304852284401633008"}},"outputId":"71137829-340f-4d5c-e1d3-3db139c1d16f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-3b871a472f1a>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Define trust transition matrix for different incidents: standstill\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mA1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrustMM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Obstacle'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mA2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrustMM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Pedestrian'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mA3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrustMM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Truck'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'trustMM' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"TNg1JCSbYO3z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","#define takeover probaility for each incident\n","\n","# print(actMM_TB)\n","\n","V1 = [x[0] for x in actMM_TB['Obstacle']]\n","V2 = [x[0] for x in  actMM_TB['Pedestrian']]\n","V3 = [x[0] for x in actMM_TB['Truck']]\n","V4 = [0] * len(V1)\n","\n","takeover_probability_dic={\n","    'construction': V1,\n","    'pedestrian': V2,\n","    'truck': V3,\n","    'empty': V4,\n","}\n","\n","print(takeover_probability_dic)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c9jbJtc6T1Rw","executionInfo":{"status":"ok","timestamp":1689438486786,"user_tz":420,"elapsed":5,"user":{"displayName":"Shili Sheng","userId":"08518622204595996933"}},"outputId":"f852b9ad-97ee-4f0a-891a-0f00f79b389f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'construction': [0.9708584706769186, 0.8156387789106179, 0.4441862628626362, 0.1833700292501912, 0.08743457644976238, 0.05320638545832135, 0.03920687496200481], 'pedestrian': [0.9848867184651617, 0.9331494918887646, 0.7513414495041253, 0.4532622211515166, 0.242415364973377, 0.14537253115153248, 0.10317031544058575], 'truck': [0.4499282042066096, 0.3532825129740943, 0.19967343873239574, 0.1012232182308811, 0.06896360330655249, 0.06002683039918466, 0.05754948848904695], 'empty': [1, 1, 1, 1, 1, 1, 1]}\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wal0Mu9cZyAw","executionInfo":{"status":"ok","timestamp":1689438861248,"user_tz":420,"elapsed":5,"user":{"displayName":"Shili Sheng","userId":"08518622204595996933"}},"outputId":"25dfbd95-8b3c-4f96-bec9-db1f894229a6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["\n","# ---------------------------\n","# define class POMDP\n","class POMDP:\n","    def __init__(self, states, actions, observations, transition_model, observation_model, reward_model):\n","        self.states = states\n","        self.actions = actions\n","        self.observations = observations\n","        self.transition_model = transition_model\n","        self.observation_model = observation_model\n","        self.reward_model = reward_model\n","        self.current_state = None\n","\n","    def set_initial_state(self, initial_state):\n","        self.current_state = initial_state\n","\n","    def take_action(self, action):\n","        next_state = self.transition_model[self.current_state][action]\n","        observation = self.observation_model[next_state][action]\n","        reward = self.reward_model[self.current_state][action][next_state]\n","        self.current_state = next_state\n","        return next_state, observation, reward\n","\n","\n","#states\n","states = dict()\n","Action_h = [1, 2] #1 stands for takeover, 2 stands for standstill\n","\n","for loc, prop in WS_node_dict.items():\n","      for action_h in Action_h:\n","           for trust in trustlevel:\n","        if trust == 6:\n","            states[(loc, trust, action_h)] = prop | {frozenset(['hightrust', ]): 1}\n","\n","        if trust == 0:\n","            states[(loc, trust, action_h)] = prop | {frozenset(['lowtrust', ]): 1}\n","\n","#Actions\n","Actions = [tuple('a1'), tuple('a2'), tuple('a3')]\n","\n","#Observations\n","Observations = [tuple('takeover'), tuple('standstill')] #1 stands for takeover, 2 stands for standstill\n","\n","#transition model\n","transitions = dict()\n","for fnode in states.keys():\n","    for tnode in states.keys():\n","        fx=fnode[0]\n","        fy=fnode[1]\n","        fz=fnode[2]\n","        tx=tnode[0]\n","        ty=tnode[1]\n","        tz=tnode[2]\n","        # action 1\n","        if (fx, tx) in WS_position_edge_dict1.keys():\n","            id=WS_position_edge_dict1[(fx, tx)]\n","            prob_trans_takeover=WS_trust_transition_matrix_takeover_dict[id]\n","            prob_trans_standstill=WS_trust_transition_matrix_standstill_dict[id]\n","            if prob_trans_takeover[fy][ty]>0:\n","              if tz == 1\n","                transitions[(fnode, Actions[0], tnode)] = prob_trans_takeover[fy][ty]*takeover_probability_dic[id][fy]\n","              if tz == 2:\n","                transitions[(fnode, Actions[0], tnode)] = prob_trans_standstill[fy][ty]*(1-takeover_probability_dic[id][fy])\n","       # action 2\n","        if (fx, tx) in WS_position_edge_dict2.keys():\n","            id=WS_position_edge_dict2[(fx, tx)]\n","            prob_trans_takeover=WS_trust_transition_matrix_takeover_dict[id]\n","            prob_trans_standstill=WS_trust_transition_matrix_standstill_dict[id]\n","            if prob_trans_takeover[fy][ty]>0:\n","              if tz == 1:\n","                transitions[(fnode, Actions[1], tnode)] = prob_trans_takeover[fy][ty]*takeover_probability_dic[id][fy]\n","              if tz == 2:\n","                transitions[(fnode, Actions[1], tnode)] = prob_trans_standstill[fy][ty]*(1-takeover_probability_dic[id][fy])\n","        # action 3\n","        if (tx, fx) in WS_position_edge_dict3.keys():\n","            id=WS_position_edge_dict3[(tx, fx)]\n","            prob_trans_takeover=WS_trust_transition_matrix_takeover_dict[id]\n","            prob_trans_standstill=WS_trust_transition_matrix_standstill_dict[id]\n","            if prob_trans_takeover[fy][ty]>0:\n","              if tz == 1:\n","                transitions[(fnode, Actions[2], tnode)] = prob_trans_takeover[fy][ty]*takeover_probability_dic[id][fy]\n","              if tz == 2:\n","                transitions[(fnode, Actions[2], tnode)] = prob_trans_standstill[fy][ty]*(1-takeover_probability_dic[id][fy])\n","\n","#observation model\n","observation_model = dict()\n","for tnode in states.keys():\n","    tx=tnode[0]\n","    ty=tnode[1]\n","    tz=tnode[2]\n","    # action 1\n","    for action in Actions:\n","      if tz == 1:\n","        observation_model[(tnode, action)]={'takeover': 1}\n","      if tz == 2:\n","        observation_model[(tnode, action)]={'standstill': 1}\n","\n","#reward model\n","reward = dict()\n","for fnode in states.keys():\n","  for action in Actions:\n","      reward[(fnode, action)] = 0\n","\n","\n","trust_pomdp = POMDP(states, Actions, Observations, transitions, observation_model, reward)\n","\n"],"metadata":{"id":"p5cGyDWkTdiv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# (L1, trust0, takeover) => (turn right) => p1 * (L2, trust1, takeover) + p2 * (L2, trust1, stanstill) + ... +"],"metadata":{"id":"sQVlpSXmhU7g"},"execution_count":null,"outputs":[]}]}